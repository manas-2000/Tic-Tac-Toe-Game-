from tkinter import *
import random


def next_turn(row, column):
    global player
    if buttons[row][column]["text"] == "" and check_winner() is False:
        if player == players[0]:
            buttons[row][column]["text"] = player

            if check_winner() is False:             # if their is no winner swap player
                player = players[1]
                label.config(text=players[1]+" Turn")

            elif check_winner() is True:            # if player wins
                label.config(text=players[0]+" Wins")

            elif check_winner() == "Tie":           # if ties
                label.config(text="Match Tied")

        else:

            buttons[row][column]["text"] = player

            if check_winner() is False:  # if their is no winner swap player
                player = players[0]
                label.config(text=players[0] + " Turn")

            elif check_winner() is True:  # if player wins
                label.config(text=players[1] + " Wins")

            elif check_winner() == "Tie":  # if ties
                label.config(text="Match Tied")


def check_winner():
    for row in range(3):
        if buttons[row][0]["text"] == buttons[row][1]["text"] == buttons[row][2]["text"] != "":

            # checking whether rows are matching and return true and making the rows green

            buttons[row][0].config(bg="green")
            buttons[row][1].config(bg="green")
            buttons[row][2].config(bg="green")
            return True

    for column in range(3):
        if buttons[0][column]["text"] == buttons[1][column]["text"] == buttons[2][column]["text"] != "":

            # checking whether columns are matching and return true and making the rows green

            buttons[0][column].config(bg="green")
            buttons[1][column].config(bg="green")
            buttons[2][column].config(bg="green")
            return True

    if buttons[0][0]['text'] == buttons[1][1]["text"] == buttons[2][2]["text"] != "":

        # checking whether diagonal elements are matching and return true and making the rows green

        buttons[0][0].config(bg="green")
        buttons[1][1].config(bg="green")
        buttons[2][2].config(bg="green")
        return True

    elif buttons[0][2]["text"] == buttons[1][1]["text"] == buttons[2][0]["text"] != "":

        # checking whether diagonal elements are matching and return true and making the rows green

        buttons[0][2].config(bg="green")
        buttons[1][1].config(bg="green")
        buttons[2][0].config(bg="green")
        return True

    elif empty_spaces() is False:
        for row in range(3):
            for column in range(3):
                buttons[row][column].config(bg="Yellow")
        return "Tie"

    else:
        return False


def empty_spaces():
    spaces = 9

    for row in range(3):
        for column in range(3):
            if buttons[row][column]["text"] != "":
                spaces -= 1

    if spaces == 0:
        return False
    else:
        return True


def new_game():
    global player

    player = random.choice(players)
    label.config(text=player+" turn")

    for row in range(3):
        for column in range(3):
            buttons[row][column].config(text="", bg="grey")


window = Tk()

window.title("Tic tac toe")

players = ["X", "O"]    # players can be changed here
player = random.choice(players)

buttons = [[0, 0, 0],
           [0, 0, 0],
           [0, 0, 0]]

# top label for which players turn

label = Label(window, text=player + " Turn", font="consolas 40", pady=10)
label.pack(side=TOP)

# Reset Button

reset_button = Button(window, text="Reset", width=20, height=2, command=new_game)
reset_button.pack(pady=20)

# creating a frame for the game window

frame = Frame(window)
frame.pack()

for row in range(3):
    for column in range(3):
        buttons[row][column] = Button(frame, text="", font=30, width=10, height=5, command=lambda row=row, column=column :next_turn(row, column), bg="grey")
        buttons[row][column].grid(row=row, column=column)

window.mainloop()
